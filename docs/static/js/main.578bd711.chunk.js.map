{"version":3,"sources":["components/AddName.js","helpers/getAnime.js","components/GridItemAnime.js","components/GridAnime.js","hooks/useFetch.js","AnimeApp.js","index.js"],"names":["AddName","currentName","currentLimite","useState","current","setCurrent","limite","setLimite","submitForm","e","preventDefault","valNumber","parseInt","verifyNumber","trim","length","onSubmit","className","name","type","placeholder","value","onChange","target","getAnime","nameAnime","a","url","encodeURI","fetch","response","json","results","requestVal","map","id","mal_id","image","image_url","title","synopsis","episodes","score","GridItemAnime","src","alt","href","rel","GridAnime","anime","limit","loading","data","info","setInfo","useEffect","then","arrayData","useFetch","request","objVal","AnimeApp","setName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.578bd711.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport const AddName = ({ currentName, currentLimite }) => {\r\n\r\n    const [ current, setCurrent ] = useState('');\r\n\r\n    const [ limite, setLimite ] = useState(\"\");\r\n    \r\n\r\n    const changeValue = (e) => {\r\n        setCurrent(e.target.value);\r\n    }\r\n\r\n    const changeLimit = (e) => {\r\n        setLimite(e.target.value);\r\n    }\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        const valNumber = parseInt(limite);\r\n\r\n        const verifyNumber = valNumber && valNumber > 0;\r\n\r\n        if ( current.trim().length > 2 ) {\r\n\r\n            if(limite.trim().length === 0) {\r\n                currentName([current]); \r\n            }\r\n\r\n            if ( verifyNumber ) { \r\n                currentName([current]);\r\n                currentLimite(valNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ submitForm } className=\"d-flex justify-evenly \">\r\n\r\n            <input className=\"form-control me-2\" name=\"NombreAnime\" type=\"search\" placeholder=\"Nombre del anime\" value={ current } onChange={ changeValue }></input>\r\n            <input className=\"form-control me-2\" name=\"LimiteAnime\" type=\"text\" placeholder=\"Limit - Default All\" value= { limite } onChange={ changeLimit }></input>\r\n            \r\n            <input className=\"btn btn-outline-success\" type=\"submit\" onSubmit= { submitForm }></input>\r\n        </form>\r\n    )\r\n}\r\n","\r\nexport const getAnime = async(nameAnime, limite) => {\r\n\r\n    const url = `https://api.jikan.moe/v3/search/anime?q=${ encodeURI( nameAnime ) }&limit=${ limite }`;\r\n\r\n\r\n    const response = await fetch(url);\r\n\r\n    const { results } = await response.json();\r\n\r\n    const requestVal = results.map( ({ mal_id, url, image_url, title, synopsis, episodes, score }) => {\r\n        return {\r\n            id: mal_id,\r\n            url: url,\r\n            image: image_url,\r\n            title: title,\r\n            synopsis: synopsis,\r\n            episodes: episodes,\r\n            score: score\r\n        }\r\n    })\r\n    \r\n\r\n    return requestVal\r\n}\r\n","import React from 'react'\r\n\r\nexport const GridItemAnime = ({ url, image, title, synopsis, episodes, score }) => {\r\n    return (\r\n        <div className=\"card text-dark bg-light m-4\">\r\n            <img className=\"card-img-top\" src={ image } alt={ title }></img>\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title text-success\">{ title }</h4>\r\n                <p className=\"card-text\">{ synopsis }</p>\r\n                <ul className=\"list-group list-group-flush \">\r\n                    <li className=\"m-1 rounded-2 list-group-item bg-light text-success\">Episodios: <span className=\"text-muted\">{ episodes }</span></li>\r\n                    <li className=\"m-1 rounded-2 list-group-item bg-light text-success\">Score: <span className=\"text-muted\">{ score }</span></li>\r\n                </ul>\r\n\r\n            </div>\r\n            \r\n            <div className=\"card-body text-end\">\r\n                <a href={ url } target=\"_blank\" rel=\"noreferrer\"><button className=\"btn btn-success\">MÃ¡s information</button></a>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport { useFetch } from '../hooks/useFetch'\r\n\r\nimport { GridItemAnime } from './GridItemAnime' \r\n\r\nexport const GridAnime = ( { anime, limite } ) => {\r\n\r\n    const { loading, data:request } = useFetch(anime, limite);\r\n\r\n    return <div className=\"card-body\">\r\n        <div className='card-title d-flex align-items-center justify-content-center'>\r\n            <h2 className=\"text-uppercase\">{ anime }</h2>\r\n        </div>\r\n        <div>\r\n            {\r\n                loading && <div className=\" d-flex align-items-center justify-content-center\"><p className=\"text-muted\">Cargando...</p></div>\r\n            }   \r\n\r\n            <div className=\"\">\r\n                {\r\n                    //gridItem\r\n                    request.map( (objVal) => {\r\n                        return <GridItemAnime key={ objVal.id } { ...objVal } />\r\n                    } )\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import { getAnime } from \"../helpers/getAnime\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\n\r\nexport const useFetch = (nameAnime, limit) => {\r\n\r\n    const [ info, setInfo ] = useState({\r\n        loading: true,\r\n        data: []\r\n    })\r\n\r\n \r\n\r\n    useEffect(() => {\r\n        getAnime(nameAnime, limit)\r\n            .then(arrayData => {\r\n                setInfo({\r\n                    loading: false,\r\n                    data: arrayData\r\n                })\r\n            })\r\n    }, [nameAnime, limit]);\r\n\r\n    return info;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddName } from './components/AddName'\r\n\r\n\r\nimport { GridAnime } from './components/GridAnime';\r\n\r\nexport const AnimeApp = () => {\r\n\r\n    const [ name, setName ] = useState([]);\r\n\r\n    const [ limite, setLimite ] = useState(-1);\r\n\r\n    return <>\r\n        <div className=\"navbar navbar-light bg-light\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\">Jikan Api</a>\r\n                <AddName currentName={ setName } currentLimite = { setLimite } />\r\n            </div>\r\n        </div>\r\n        <div className=\"container mt-4 card\">\r\n            {\r\n                name.map(currentName => {\r\n                    return <GridAnime key={ currentName } anime={ currentName } limite={ limite } />\r\n                })\r\n            }\r\n        </div>\r\n    </>\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AnimeApp } from './AnimeApp';\n\nReactDOM.render(\n    <AnimeApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}